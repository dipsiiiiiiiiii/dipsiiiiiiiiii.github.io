{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/20191024-til/","webpackCompilationHash":"c21733c0e5630406cda7","result":{"data":{"markdownRemark":{"id":"65f36cc0-11a8-5e92-be21-e77c044092a8","html":"<h2 id=\"git-세션\"><a href=\"#git-%EC%84%B8%EC%85%98\" aria-label=\"git 세션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git 세션</h2>\n<p>버전관리의 기능</p>\n<ul>\n<li>내역 날짜,\n동일한 날에 버전이 많이 나오게 되면\n바뀐 내역을 확인 하기 위해서는 엑셀파일로 저장\n협업할 때 더 복잡해진다.</li>\n</ul>\n<p>git을 안했을 떄</p>\n<p>DB를 만들어서 저장하면 되는데 그럼 그 DB를 접근하는 프로그램을 만들어야 된다.</p>\n<p>git basics</p>\n<p>modified 수정사항 > staged 중간 세이브 > committed\ncommit 해야만 history에 남는다.</p>\n<p>commit을 하게 되면 지워야 하는게 큰 일이라서 중간 세이브가 필요하다.\n문서 수정 과정이랑 똑같다.</p>\n<p>git commands\n모든 git commands는 git으로 시작한다.\ngit add가 staged상태가 됨.\ngit diff는 중간 세이브 이전의 파일만 보여줌\ngit status를 상태를 보여줌</p>\n<p>협업할 때 영향을 안 받고 싶을 때 branch로 빠져서 기능을 구현한 다음에 master branch로 merge해줘야 한다.\nbranch는 개발자 별로 하는게 아니라 기능별로 해야 한다.\nmerge하기 전에 코드 리뷰를 받고 해야 한다.\nrevert할 때 원하는 위치로 옮기기 편하다.</p>\n<p>branch에서 또 branch를 만들 수는 있지만 이미 기존의 branch가 안정적이지 않으므로 안 해야 한다.</p>\n<p>gitignore 는 캐시파일, 비공개파일 넣어놓으면 알아서 history에 반영하지 않는다.</p>\n<p>github은 git의 중앙 서버 역할\ncommit까지만 하면 local에서만 보여지므로 다른 개발자가 볼 수 없다.\npush까지 해야 github에 저장되서 다른 개발자들이 볼 수 있다.\n다른 개발자는 pull을 통해 내가 push한 파일을 볼 수 있게 된다.\npull은 새로운 수정 사항만 갖고 올 수 있다.\nclone은 새로운 컴퓨터나 개발자가 새로 왔을 때 제일 먼저 해줘야 한다.\nfork는 권한 없이 clone기능을 하는 건데 복사 파일을 갖고 오는 거다. 단, original에는 반영이 안되고 반영은 PR을 통해 할 수 있다.</p>\n<p>내가 수정한 것과 다른 개발자가 수정한 것이 겹쳐 버리면 git은 둘 중에 무엇을 선택해야 할지 모른다.</p>\n<p>git status를 하면 merge 안되는 위치가 나온다. 그러면 직접 수정해야 한다.</p>\n<p>branch는 기능을 다 구현하면 Merge하고 지워야 한다.\nbranch 만드는 과정은 local에서 하는 거다.\nclone으로 복제해온 master branch에서 local에서 새로운 branch를 만든다.\n새로운 branch를 만들 때는 항상 pull먼저 해주고 최신 버전으로 master branch를 해주고 그 다음 branch를 만들어야 한다..</p>\n<p>merge 하기 전 코드 리뷰 하는 과정은 내 local에서 작업하던 branch를 github에 보내준다.\n관리자가 PR(pull request)을 통해 코드리뷰를 해주고 LGTM(Looks good to me)를 남겨주고 관리자가 직접 merge한다.\n관리자가 할 수도 있고 다른 여러 사람이 할 수 있다.</p>\n<p>git 실습</p>\n<p>브랜치명은 ‘feature/kani’\nclone을 한 상태면 이미 기존에 init을 했기 떄문에 해줄 필요가 없다.</p>\n<p>branch를 merge 한 이후에는 master branch로 이동한 후 git branch -d branch이름   으로 삭제하면 된다.</p>","fields":{"slug":"/posts/20191024-til/","tagSlugs":["/tag/web-development/","/tag/frontend/","/tag/til/","/tag/git/","/tag/react-native/"]},"frontmatter":{"date":"2019-10-24T15:40:32.169Z","description":"Today I Learned","tags":["Web Development","Frontend","TIL","GIT","React-Native"],"title":"[TIL] 2019.10.24. ","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/20191024-til/"}}}