{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/20191105-til/","webpackCompilationHash":"c21733c0e5630406cda7","result":{"data":{"markdownRemark":{"id":"f6106776-0e3c-588e-9f25-c9b972150630","html":"<h2 id=\"onclick에-함수-이름에-인자-넣기\"><a href=\"#onclick%EC%97%90-%ED%95%A8%EC%88%98-%EC%9D%B4%EB%A6%84%EC%97%90-%EC%9D%B8%EC%9E%90-%EB%84%A3%EA%B8%B0\" aria-label=\"onclick에 함수 이름에 인자 넣기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>onClick에 함수 이름에 인자 넣기</h2>\n<p>onClick={() => { function(e) }}</p>\n<h2 id=\"responsive-web\"><a href=\"#responsive-web\" aria-label=\"responsive web permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>responsive web</h2>\n<p>사이즈가 조절 되면서 모든 화면이 잘 나올 수 있게 구현되는 웹</p>\n<p>naver는 초기 width값을 받아서(window.innerWidth) naver.com 이나 m.naver.com으로 아예 소스코드가 분리돼있다.</p>\n<h2 id=\"media-query--responsive-web을-구현하는-css-technique\"><a href=\"#media-query--responsive-web%EC%9D%84-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-css-technique\" aria-label=\"media query  responsive web을 구현하는 css technique permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>media query : responsive web을 구현하는 css technique!</h2>\n<p>syntax\n@media only screen and (max-width: 480px) {\nbody {\n}</p>\n<p>}\n@media only print 등등</p>\n<p>inline보다 className이 더 우선순위가 높다</p>\n<p>@media only screen and (min-width: 320px) and (max-width: 480px) {</p>\n<p>}</p>\n<p>style 폴더 밑에 config.scss 안에다가 mediaQuery 변수들을 지정해서 import해서 사용하면 된다.</p>\n<h2 id=\"styled-component\"><a href=\"#styled-component\" aria-label=\"styled component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled component</h2>\n<h2 id=\"break-point\"><a href=\"#break-point\" aria-label=\"break point permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>break point</h2>\n<p>responsive standard\nbreak point가 하나면 한 요소에 대해서 2개의 css를 넣는 거다.\n2개면 3개\n3개면 4개</p>\n<p>min-deivce-width</p>\n<p>1.\ncomponent 2개를 만들어둬서 display block, none으로 조절</p>\n<p>2.\nresize 이벤트를 붙여서 크기 조건에 따라 component를 넣음.</p>\n<h2 id=\"react-ref\"><a href=\"#react-ref\" aria-label=\"react ref permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>react ref</h2>\n<p>window 자체에 click 이벤트 달고나서 거기에서 함수 호출</p>\n<p>component는 재사용하기 위함인데 getElementById처럼 접근하면 불편하다.\nref를 사용하면 dom에 직접 접근할 수 있다. className, id 없어도!</p>\n<p>ref = (node => this.searchContainer = node)</p>\n<p>componentDidmount에 저장해두면 다른 페이지 가서도 저장 돼있으므로 componentWillUnmount에서 없애줘야 한다.</p>","fields":{"slug":"/posts/20191105-til/","tagSlugs":["/tag/web-development/","/tag/frontend/","/tag/til/","/tag/git/","/tag/react-native/"]},"frontmatter":{"date":"2019-11-05T12:40:32.169Z","description":"Today I Learned","tags":["Web Development","Frontend","TIL","GIT","React-Native"],"title":"[TIL] 2019.11.05. ","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/20191105-til/"}}}