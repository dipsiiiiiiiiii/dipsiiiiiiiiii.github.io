{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/20191022-til/","webpackCompilationHash":"24eb2d42a91051e674f0","result":{"data":{"markdownRemark":{"id":"1be4dfac-499e-5c14-98b8-3ecf794730c7","html":"<h1 id=\"알고리즘-세션\"><a href=\"#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%B8%EC%85%98\" aria-label=\"알고리즘 세션 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>알고리즘 세션</h1>\n<h2 id=\"풀이-접근-과정\"><a href=\"#%ED%92%80%EC%9D%B4-%EC%A0%91%EA%B7%BC-%EA%B3%BC%EC%A0%95\" aria-label=\"풀이 접근 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 접근 과정</h2>\n<ol>\n<li>문제를 완벽히 이해 > 확인 과정까지!! ex)제가 이해하기로는 …<br>\n문제 이해는 input, output으로 정리.</li>\n<li>코드 하다가 막히는 게 아니라 처음부터 다 완벽하게 짜고 코드는 맨 마지막에 작성하기 시작해야 한다.</li>\n<li>내 생각 과정을 말 하면서 해야 한다.</li>\n<li>문제 맞추는 거는 당연히 중요하지만 그 과정을 말을 함으로써 내가 어떻게 접근하는 지를 전달하는 것도 중요하다.</li>\n<li>면접할 때 면접관이 힌트를 주게끔 해야 한다. 면접관과의 케미 중요!!</li>\n</ol>\n<h2 id=\"해결책-구하는-방법\"><a href=\"#%ED%95%B4%EA%B2%B0%EC%B1%85-%EA%B5%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"해결책 구하는 방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결책 구하는 방법</h2>\n<p>AI의 시발점 : 사람의 생각은 무수한 if의 연속이다.<br>\n아무리 복잡한 것도 binary decision 으로 나눠질 수 있다!<br>\n알고리즘 문제도 똑같다.</p>\n<p>시작점을 정하고 binary decision!<br>\n알고리즘 구조 그림을 그려서 해결 방향을 찾고 코드를 그리겠다고 말하고 코드 그림!<br>\n코드 다 짜고나서 test꼭 해봐야 한다. Test input을 정해서 넣어보면 된다.<br>\nTest output expected를 정해서 expected와 실제 output을 비교한다.<br>\n만약 expected와 다르다면 debugging 해야 된다. 검증 필수!!<br>\n막혀있을 때도 왜 막혀 있는지 어떻게 접근하려고 했는지 항상 말해줘야 한다.</p>\n<ol>\n<li>인성(이력서 베이스, 말투, 행동, 옷)</li>\n<li>지식 실력</li>\n<li>코딩 실력</li>\n</ol>\n<h1 id=\"react-native-문법\"><a href=\"#react-native-%EB%AC%B8%EB%B2%95\" aria-label=\"react native 문법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Native 문법</h1>\n<h2 id=\"style\"><a href=\"#style\" aria-label=\"style permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>style</h2>\n<p>이미지를 원으로 만들기 위해서는 borderRadius는 react에서는 50%로 줄 수 없어서 height의 절반 값으로 줘야 한다.</p>\n<p>props에서 안드로이드는 uri만 되고 ios는 uri, url둘 다 된다.<br>\nuri를 쓰자.</p>\n<p>자식 컴포넌트에서 flex값으로 부모 크기를 기준으로 비율에 따라 나눌 수 있다.</p>\n<p>Image를 넣어주려면 Image 컴포넌트에 source prop으로 넣어야 한다.  </p>\n<p>z-index가 없지만 RN은 무조건 뒤에 있는 컴포넌트을 맨 위로 올려둡니다.</p>\n<p>가장 위로 올리고 싶은 컴포넌트를 제일 마지막에 두면 된다.</p>\n<p>기본적으로 display: flex가 설정되어 있다.</p>\n<p>에러 코드 500이면 경로 문제일 가능성 높음.</p>\n<h2 id=\"flat-list\"><a href=\"#flat-list\" aria-label=\"flat list permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flat List</h2>\n<p>FlatList 컴포넌트는 props로 항상 data와 renderItem을 가지고 있다.<br>\nJavaScript ES6 문법의 map과 역할이 비슷하다.<br>\ndata는 다른 파일에 저장해주고 import를 통해 가져오는 방법으로 관리해야 한다.<br>\nrenderItem은 argument로 항상 {item}을 받아야 한다.<br>\nid는 string타입으로만 항상 받아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> FlatList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native'</span>\n<span class=\"token keyword\">import</span> <span class=\"token constant\">DATA</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./DATA'</span>\n\n<span class=\"token comment\">/*\nconst DATA = [{\n    id: 'asdfsvwe',\n    key1: 'value1',\n}, {\n    id: 'agwrwadsf',\n    key2: 'value2'\n}]\n*/</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FlatList</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">DATA</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>FlatList \n    data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">}</span>\n    renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n    <span class=\"token operator\">&lt;</span>Component props1<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">}</span> props2<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n    keyExtractor<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"javascript-til\"><a href=\"#javascript-til\" aria-label=\"javascript til permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JavaScript TIL</h2>\n<p>button태그에는 onSubmit이 적용이 안된다.</p>","fields":{"slug":"/posts/20191022-til/","tagSlugs":["/tag/web-development/","/tag/frontend/","/tag/til/","/tag/algorithms/","/tag/react-native/"]},"frontmatter":{"date":"2019-10-22T15:40:32.169Z","description":"Today I Learned","tags":["Web Development","Frontend","TIL","Algorithms","React-Native"],"title":"[TIL] 2019.10.22. 알고리즘 접근법, React-Native 문법","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/20191022-til/"}}}